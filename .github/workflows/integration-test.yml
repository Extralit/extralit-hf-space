name: Integration Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t extralit-hf-space:latest \
            --build-arg EXTRALIT_SERVER_IMAGE=extralit/extralit-server \
            --build-arg EXTRALIT_VERSION=latest \
            .

      - name: Create test network
        run: docker network create extralit-network

      - name: Start container for testing
        run: |
          docker run -d \
            --name extralit-container \
            --network extralit-network \
            -p 6900:6900 \
            -p 9200:9200 \
            -p 6379:6379 \
            extralit-hf-space:latest

      - name: Copy oauth config to container
        run: |
          docker cp tests/.oauth.yml extralit-container:/home/extralit/.oauth.yml

      - name: Wait for services to initialize
        run: |
          echo "Waiting for services to start..."
          echo "Initial wait for Elasticsearch and Redis to start..."
          sleep 45
          
          # Wait up to 180 seconds for the service to be ready (accounting for 30s sleep + startup time)
          timeout=180
          elapsed=45
          
          while [ $elapsed -lt $timeout ]; do
            # Check if extralit server is ready
            if docker exec extralit-container curl -f -s http://127.0.0.1:6900/api/v1/version > /dev/null 2>&1; then
              echo "✅ Extralit server is ready after ${elapsed}s"
              break
            fi
            
            echo "Extralit server not ready yet, waiting... (${elapsed}s elapsed)"
            sleep 15
            elapsed=$((elapsed + 15))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Extralit server failed to start within ${timeout}s"
            echo "Container logs:"
            docker logs extralit-container
            exit 1
          fi

      - name: Run HTTP health check
        run: |
          echo "Running health check..."
          
          # Test the status endpoint
          response=$(docker exec extralit-container curl -s -w "%{http_code}" http://127.0.0.1:6900/api/v1/status)
          http_code="${response: -3}"
          response_body="${response%???}"
          
          echo "HTTP Status Code: $http_code"
          echo "Response Body: $response_body"
          
          # Check if HTTP status is 200
          if [ "$http_code" != "200" ]; then
            echo "❌ Health check failed: Expected HTTP 200, got $http_code"
            exit 1
          fi
          
          # Check if response is valid JSON (dict/object)
          if echo "$response_body" | jq empty 2>/dev/null && echo "$response_body" | jq -e 'type == "object"' >/dev/null 2>&1; then
            echo "✅ Health check passed: Received valid JSON object"
            echo "Response: $response_body"
          else
            echo "❌ Health check failed: Response is not a valid JSON object"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Test workspace creation
        run: |
          echo "Testing workspace functionality..."
          
          # Check if my_workspace is accessible or created
          workspace_response=$(docker exec extralit-container curl -s -w "%{http_code}" http://127.0.0.1:6900/api/v1/workspaces || echo "000")
          workspace_http_code="${workspace_response: -3}"
          workspace_body="${workspace_response%???}"
          
          echo "Workspace endpoint HTTP Status: $workspace_http_code"
          echo "Workspace response: $workspace_body"
          
          # If workspaces endpoint exists, verify my_workspace is available
          if [ "$workspace_http_code" = "200" ]; then
            if echo "$workspace_body" | jq -e '.[] | select(.name == "my_workspace")' >/dev/null 2>&1; then
              echo "✅ Workspace 'my_workspace' found"
            else
              echo "⚠️  Workspace 'my_workspace' not found in response, but service is running"
            fi
          else
            echo "⚠️  Workspace endpoint not available or different API structure"
          fi

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "=== Container Logs ==="
          docker logs extralit-container
          
          echo "=== Container Status ==="
          docker ps -a --filter name=extralit-container
          
          echo "=== Container Inspect ==="
          docker inspect extralit-container

      - name: Cleanup
        if: always()
        run: |
          docker stop extralit-container || true
          docker rm extralit-container || true
          docker network rm extralit-network || true
          docker rmi extralit-hf-space:latest || true
