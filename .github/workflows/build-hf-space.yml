name: Build extralit-hf-space Image

on:
  repository_dispatch:
    types:
      - build-hf-space
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine IMAGE_TAG
        id: determine_tag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            TAG="${{ github.event.client_payload.tag }}"
          else
            TAG="latest"
          fi
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
      - name: Set variables based on release flag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]] && [[ "${{ github.event.client_payload.is_release }}" == "true" ]]; then
            echo "PLATFORMS=linux/amd64,linux/arm64" >> $GITHUB_ENV
            echo "REPO=extralit/extralit-hf-space" >> $GITHUB_ENV
            echo "EXTRALIT_SERVER_IMAGE=extralit/extralit-server" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.AR_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.AR_DOCKER_PASSWORD }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]] && [[ "${{ github.event.client_payload.is_release }}" != "true" ]]; then
            echo "PLATFORMS=linux/amd64" >> $GITHUB_ENV
            echo "REPO=extralitdev/extralit-hf-space" >> $GITHUB_ENV
            echo "EXTRALIT_SERVER_IMAGE=extralitdev/extralit-server" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.AR_DOCKER_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.AR_DOCKER_PASSWORD_DEV }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "PLATFORMS=linux/amd64" >> $GITHUB_ENV
            echo "REPO=extralit/extralit-hf-space" >> $GITHUB_ENV
            echo "EXTRALIT_SERVER_IMAGE=extralit/extralit-server" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.AR_DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.AR_DOCKER_PASSWORD }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "PLATFORMS=linux/amd64" >> $GITHUB_ENV
            echo "REPO=extralitdev/extralit-hf-space" >> $GITHUB_ENV
            echo "EXTRALIT_SERVER_IMAGE=extralitdev/extralit-server" >> $GITHUB_ENV
            echo "DOCKER_USERNAME=${{ secrets.AR_DOCKER_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DOCKER_PASSWORD=${{ secrets.AR_DOCKER_PASSWORD_DEV }}" >> $GITHUB_ENV
          else
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
            echo "No matching event/branch criteria. Skipping build." >> $GITHUB_ENV
          fi

      - name: Skip build (no matching criteria)
        if: env.SKIP_BUILD == 'true'
        run: exit 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build & push extralit-hf-space Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            EXTRALIT_SERVER_IMAGE=${{ env.EXTRALIT_SERVER_IMAGE }}
            EXTRALIT_VERSION=${{ env.IMAGE_TAG }}
          tags: |
            ${{ env.REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.REPO }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Hub Description for `extralit-hf-space`
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: ${{ env.REPO }}
          readme-filepath: README.md

      - name: Trigger HuggingFace Space Rebuild
        if: env.REPO == 'extralitdev/extralit-hf-space'
        run: |
          python -m pip install --upgrade -q pip
          pip install -q huggingface_hub
          
          python -c "
          from huggingface_hub import HfApi
          
          # Create an instance of the HfApi class
          api = HfApi()
          
          # Restart the space with factory reboot
          api.restart_space(
              repo_id='extralit-dev/public-demo', 
              token='${{ secrets.HF_TOKEN_EXTRALIT_INTERNAL_TESTING }}', 
              factory_reboot=True
          )
          print('Successfully triggered HuggingFace Space rebuild for extralit-dev/public-demo')
          "
